#!/bin/bash
#### Non-Customizable Header ####
# BASH_BOILER_VERSION=2019.07.02.01
# Generated with Bash-Boiler on 07-02-19_09:37:58
# Use updater to update this script:
# https://github.com/coreyramirezgomez/Bash-Boiler.git
# Modifying any content between blocks like the following:
# "#### Non-Customizable ... #####"
# ....
# "#### ####"
# will be overwritten by Bash-Boiler updater function.
trap catch_exit $?
#### ####

#### Custom Header ####
#### ####

#### Non-Customizable Global Variables ####
QUIET=""
START_TIME="$(date +%s)"
START_DATE="$(date +%m-%d-%y_%H:%M:%S)"
VERBOSE=""
#### ####

#### Customizable Variables ####
ARGS_REQUIRED=1
BINARIES_REQUIRED=()
GARBAGE_COLLECTOR=0
GARBAGE=()
DEBUG=0
FORCE_FLAG=0
WORK_DIR="$(pwd)" # Only variable not in alphabetical order because LOG_FILE depends on it.
LOG_FILE="$WORK_DIR/""$(basename $0).log"
LOGGING=0
#### ####

#### Custom Variables ####
ACTION=""
BASH_BOILER_VERSION="2019.08.26.01"
BINARIES_OPTIONAL=( 'beautysh' ) # Duplicated on purpose, to keep BINARIES_REQUIRED clean for generation.
BLOCK_FLAG="####" # Only variable not in alphabetical order because BLOCK_FLAG depends on it.
BLOCK_END="$BLOCK_FLAG $BLOCK_FLAG"
BLOCK_NAMES=(
	"Non-Customizable Header"
	"Custom Header"
	"Non-Customizable Global Variables"
	"Customizable Variables"
	"Custom Variables"
	"Non-Customizable Functions"
	"Non-Customizable External Template Functions"
	"Customizable Functions"
	"Custom Functions"
	"Customizable Script Entry"
)
GARBAGE_COLLECTOR=1 # Duplicated on purpose, to keep GARBAGE_COLLECTOR clean for generation.
EXTERNAL_PROJECT_DESTINATION=(
	"$WORK_DIR/cprint_temp"
)
EXTERNAL_PROJECT_FILE_TO_IMPORT=(
	"$WORK_DIR/cprint_temp/cprint.tmp"
)
EXTERNAL_PROJECT_INIT_OPTIONS=(
	"bash cprint --export cprint.tmp"
)
EXTERNAL_PROJECT_REPOS=(
	"https://github.com/coreyramirezgomez/cprint.git"
)
NAME=""
#### ####

#### Non-Customizable Functions ####
backup_file()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	debug_print -e -B -S "(${FUNCNAME[0]}) Redirecting to make_backup function."
	make_backup $@
	return $?
}
make_backup()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received."
	case $# in
		1)
			backup_target="$1"
			debug_print -e -Y -S "(${FUNCNAME[0]}) No backup destination specified."
			backup_dest="$1-backup-$(date +%m-%d-%y_%H:%M:%S)"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Using default: $backup_dest"
			;;
		2)
			backup_target="$1"
			backup_dest="$2"
			;;
		*)
			debug_print -e -Y -S "(${FUNCNAME[0]}) More that 2 arguments provided: $*"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Only using first 2."
			backup_target="$1"
			backup_dest="$2"
			;;
	esac

	if [ ! -f "$backup_target" ] && [ ! -d "$backup_target" ]; then
		local_print -R -S "(${FUNCNAME[0]}) Nothing to backup @ $backup_target"
		return 1
	fi

	if	[ -d "$backup_dest" ] || [ -f "$backup_dest" ]; then
		local_print -R -S "(${FUNCNAME[0]}) Backup destination already exists: $backup_dest"
		get_response "(${FUNCNAME[0]}) Would you like to backup $backup_dest?"
		[ $? -eq 1 ] && return 1
		make_backup "$backup_dest"
		[ $? -ne 0 ] && return 1
	fi
	cp -rf"$VERBOSE" -- "$backup_target" "$backup_dest"
	return_code=$?
	[ $return_code -ne 0 ] && fail_notice_exit "(${FUNCNAME[0]}) Backup failure for $backup_target" $return_code
	debug_print -e -B -S "Successfully created backup of $backup_target to $backup_dest"
	return $return_code
}
catch_exit()
{
	code=$?
	debug_print -e -B -S "(${FUNCNAME[0]}) START DATE: $START_DATE"
	debug_print -e -B -S "(${FUNCNAME[0]}) END DATE: $(date +%m-%d-%y_%H:%M:%S)"
	debug_print -e -B -S "$0 ran for  $(( $(date +%s) - $START_TIME ))s"
	case $code in
		# Exit codes from https://www.tldp.org/LDP/abs/html/exitcodes.html
		0) debug_print -e -G -S "(${FUNCNAME[0]}) Successful Exit: $code" ;;
		1) debug_print -e -R -S "(${FUNCNAME[0]}) General Fatal Exit: $code " ;;
		2) debug_print -e -R -S "(${FUNCNAME[0]}) Misuse of shell builtins: $code" ;;
		126) debug_print -e -R -S "(${FUNCNAME[0]}) Command invoked cannot execute: $code" ;;
		127) debug_print -e -R -S "(${FUNCNAME[0]}) Command not found: $code" ;;
		128) debug_print -e -R -S "(${FUNCNAME[0]}) Invalid argument to exit: $code" ;;
		129|13[0-9]|14[0-9]|15[0-9]|16[0-5])debug_print -e -R -S "(${FUNCNAME[0]}) Fatal error signal: $code" ;;
		130) debug_print -e -Y -S "(${FUNCNAME[0]}) Script terminated by Control-C: $code" ;;
		# Custom exit codes
		100) debug_print -e -Y -S "(${FUNCNAME[0]}) Unspecified error: $code" ;;
		101) debug_print -e -R -S "(${FUNCNAME[0]}) Missing required variable or argument: $code" ;;
	esac
	catch_exit_custom "$code"
	if [ $GARBAGE_COLLECTOR -eq 1 ]; then
		for t in "${GARBAGE[@]}"
		do
			garbage_dump "$t"
		done
	fi
	debug_print -e -B -S "======= End of Run for $0 ======="
}
check_binaries()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	if [ $# -lt 1 ];then
		debug_print -e -Y -S "(${FUNCNAME[0]}) Not enough arguments received."
		return 0
	fi
	debug_print -e -B -S "(${FUNCNAME[0]}) Using PATH=$PATH"
	missing=0
	arr=("$@")
	debug_print -e -B -S "(${FUNCNAME[0]}) Received binary package list: ${arr[*]}"
	for p in "${arr[@]}"
	do
		if which "$p"  >&/dev/null; then
			debug_print -e -G -S "(${FUNCNAME[0]}) Found $p"
		else
			debug_print -e -Y -S "(${FUNCNAME[0]}) Missing binary package: $p"
			((missing++))
		fi
	done
	return $missing
}
garbage_add()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	for a in "$@"
	do
		debug_print -e -B -S "(${FUNCNAME[0]}) Adding to GARBAGE pile: $a"
		GARBAGE=( "${GARBAGE[@]}" "$a" )
	done
	return 0
}
garbage_dump()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	for i in "$@"
	do
		if [ -f "$i" ];then
			debug_print -e -Y -S "(${FUNCNAME[0]}) Removing file: $i"
			rm -f"$VERBOSE" "$i"
			return_code=$?
		elif [ -d "$i" ];then
			debug_print -e -Y -S "(${FUNCNAME[0]}) Removing directory: $i"
			rm -rf"$VERBOSE" "$i"
			return_code=$?
		else
			debug_print -e -R -S "(${FUNCNAME[0]}) $i doesn't exist."
			return_code=0
		fi
	done
	return $return_code
}
debug_state()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	debug_print -e -B -S "(${FUNCNAME[0]}) Current Template Variable State: "
	debug_print -e -B -S "(${FUNCNAME[0]}) WORK_DIR: $WORK_DIR"
	debug_print -e -B -S "(${FUNCNAME[0]}) FORCE_FLAG: $(var_state $FORCE_FLAG)"
	debug_print -e -B -S "(${FUNCNAME[0]}) DEBUG: $(var_state $DEBUG)"
	debug_print -e -B -S "(${FUNCNAME[0]}) VERBOSE: $VERBOSE"
	debug_print -e -B -S "(${FUNCNAME[0]}) QUIET: $QUIET"
	debug_print -e -B -S "(${FUNCNAME[0]}) START_DATE: $START_DATE"
	debug_print -e -B -S "(${FUNCNAME[0]}) START_TIME: $START_TIME"
	debug_print -e -B -S "(${FUNCNAME[0]}) LOG_FILE: $LOG_FILE"
	debug_print -e -B -S "(${FUNCNAME[0]}) LOGGING: $(var_state $LOGGING)"
	debug_print -e -B -S "(${FUNCNAME[0]}) BINARIES_REQUIRED: ${BINARIES_REQUIRED[*]}"
	debug_print -e -B -S "(${FUNCNAME[0]}) BINARIES_OPTIONAL: ${BINARIES_OPTIONAL[*]}"
	debug_state_custom
}
fail_notice_exit()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	case "$#" in
		0)
			desc="Unknown"
			error_code=100
			;;
		1)
			desc="$1"
			error_code=100
			;;
		2)
			desc="$1"
			error_code="$2"
			;;
		*)
			debug_print -e -Y "(${FUNCNAME[0]}) Received more than 2 required args: $*"
			desc="$1"
			error_code="$2"
			;;
	esac
	local_print -e -R -S "Failure: $desc"
	exit $error_code
}
get_response()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	debug_print -e -B -S "(${FUNCNAME[0]}) Received question: $1"
	reply=""
	[ $FORCE_FLAG -eq 1 ] && reply="y"
	while :
	do
		case "$reply" in
			"N" | "n")
				debug_print -e -B -S "(${FUNCNAME[0]}) Returning $reply (1) reply."
				return 1
				;;
			"Y" | "y")
				debug_print -e -B -S "(${FUNCNAME[0]}) Returning $reply (0) reply."
				return 0
				;;
			*)
				local_print -e -Y -n "$1 (Y/N): "
				read -n 1 reply
				echo ""
				debug_print -e -B -S "(${FUNCNAME[0]}) Question answered with: $reply"
				;;
		esac
	done
}
local_print()
{
	if [ $LOGGING -eq 1 ]; then
		cprint -l "$LOG_FILE" "$@"
	else
		cprint "$@"
	fi
}
debug_print()
{
	if [ $LOGGING -eq 1 ] && [ $DEBUG -eq 1 ]; then
		cprint -l "$LOG_FILE" "$@"
	elif [ $LOGGING -eq 1 ] && [ $DEBUG -eq 0 ]; then
		cprint -l "$LOG_FILE" "$@" >/dev/null 2>&1
	elif [ $LOGGING -eq 0 ] && [ $DEBUG -eq 1 ]; then
		cprint "$@"
	fi
}
main()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $DEBUG -eq 1 ] && VERBOSE="v"
	[ $DEBUG -eq 0 ] && QUIET="q"
	if [ $LOGGING -eq 1 ] && [ ! -f "$LOG_FILE" ]; then
		touch "$LOG_FILE" || fail_notice_exit "(${FUNCNAME[0]}) Unable to create log file @ $LOG_FILE"
		debug_print -e -B -S "(${FUNCNAME[0]}) Created Log File: $LOG_FILE @ $START_DATE"
	fi
	debug_state
	check_binaries "${BINARIES_REQUIRED[@]}"
	[ $? -ne 0 ] && fail_notice_exit "(${FUNCNAME[0]}) Missing $? required binaries."
	main_custom
}
parse_args()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	EXTRA_ARGS=()
	while [ ${#} -gt 0 ]; do
		case "${1}" in
			"--help" | "-h") usage ;;
			"--debug") DEBUG=$(var_toggle $DEBUG) ;;
			"--force" | "-f") FORCE_FLAG=$(var_toggle $FORCE_FLAG) ;;
			"--garbage-collect") GARBAGE_COLLECTOR=$(var_toggle $GARBAGE_COLLECTOR) ;;
			"--logging"| "-l") LOGGING=$(var_toggle $LOGGING) ;;
			"--logfile")
				[ -d "$2" ] && fail_notice_exit "(${FUNCNAME[0]}) Invalid logfile, it is a directory: $2"
				LOG_FILE="$2"
				shift
				;;
			"--work_dir")
				[ ! -d "$2" ] && fail_notice_exit "(${FUNCNAME[0]}) Invalid directory: $2"
				WORK_DIR="$2"
				shift
				;;
			*)
				debug_print -B "(${FUNCNAME[0]}) Extra Arg Received ($1), saving for custom parser."
				EXTRA_ARGS=( "${EXTRA_ARGS[@]}" "$1" )
				;;
		esac
		shift 1
	done
	parse_args_custom "${EXTRA_ARGS[@]}"
}
usage()
{
	echo ""
	echo "Usage for $0:"
	echo ""
	echo -n "	--garbage-collect: Toggle garbage-collect flag. Removes all files/directory variables in GARBAGE array. Default: "
	[ $GARBAGE_COLLECTOR -eq 0 ] && local_print -R "$(var_state $GARBAGE_COLLECTOR)"
	[ $GARBAGE_COLLECTOR -eq 1 ] && local_print -G "$(var_state $GARBAGE_COLLECTOR)"
	echo -n "	--debug: Toggle Debugging. Default: "
	[ $DEBUG -eq 0 ] && local_print -R "$(var_state $DEBUG)"
	[ $DEBUG -eq 1 ] && local_print -G "$(var_state $DEBUG)"
	echo -n "	--force: Answer 'yes'/'y' to all questions. (aka force) Default: "
	[ $FORCE_FLAG -eq 0 ] && local_print -R "$(var_state $FORCE_FLAG)"
	[ $FORCE_FLAG -eq 1 ] && local_print -G "$(var_state $FORCE_FLAG)"
	echo "	[--help|-h]: Display this dialog"
	echo -n "	[--logging|-l]: Toggle logging. Default: "
	[ $LOGGING -eq 0 ] && local_print -R "$(var_state $LOGGING)"
	[ $LOGGING -eq 1 ] && local_print -G "$(var_state $LOGGING)"
	echo "	--logfile filename: Specifiy the logfile output. Default: $LOG_FILE"
	usage_custom
	echo ""
	exit 0
}
var_state()
{
	case $1 in
		0) echo "OFF" ;;
		1) echo "ON" ;;
		*) echo "Unknown ($1)"
	esac
}
var_toggle()
{
	case $1 in
		[0-1]) echo $(( (($1 + 1 )) % 2 )) ;;
		*) fail_notice_exit "(${FUNCNAME[0]}) Can't toggle: $1"
	esac
}
#### ####

#### Non-Customizable External Template Functions ####

cprint()
{
	CPRINT_process_nl()
	{
		if [ -z ${CPRINT_NL} ]; then
			[ ! -z ${CPRINT_ERR_OUT} ] && (>&2 echo "") || echo ""
		fi
	}
	CPRINT_process_prenl()
	{
		if [ ! -z ${PCPRINT_NL} ]; then
			while [ $PCPRINT_NL -gt 0 ]
			do
				[ ! -z ${CPRINT_ERR_OUT} ] && (>&2 echo "") || echo ""
				[ ! -z ${CPRINT_LOG_CPRINT_STYLED} ] && echo ""  >> "$CPRINT_LOG_CPRINT_STYLED"
				[ ! -z ${CPRINT_LOG} ] && echo ""  >> "$CPRINT_LOG"
				((PCPRINT_NL--))
			done
		fi
	}
	CPRINT_process_string()
	{
		[ -z "${CPRINT_STRING}" ] && CPRINT_STRING=""
		[ ! -z ${CPRINT_LOG} ] && echo "$CPRINT_STRING" >> "$CPRINT_LOG"
		[ -z ${CPRINT_POS} ] && CPRINT_POS=0 # Position is not set, so use the default.
		[ ! -z ${CPRINT_STYLE} ] && CPRINT_STRING="$($CPRINT_STYLE $CPRINT_STRING)" # Apply style
		[ -z "${CPRINT_FOREGROUND}" ] && CPRINT_FOREGROUND=""
		[ -z "${CPRINT_BACKGROUND}" ] && CPRINT_BACKGROUND=""
		RESET=$(CPRINT_translate_color_code "RESET")
		if [ -f "$(which printf 2>/dev/null)" ];then
			[ ! -z ${CPRINT_ERR_OUT} ] && (>&2 printf -- "$CPRINT_FOREGROUND$CPRINT_BACKGROUND%$CPRINT_POS"s"$RESET" "$CPRINT_STRING") || printf -- "$CPRINT_FOREGROUND$CPRINT_BACKGROUND%$CPRINT_POS"s"$RESET" "$CPRINT_STRING"
		else # printf doesn't exist
			[ ! -z ${CPRINT_ERR_OUT} ] && (>&2 echo "$CPRINT_FOREGROUND""$CPRINT_BACKGROUND""$CPRINT_STRING""$RESET") || echo "$CPRINT_FOREGROUND""$CPRINT_BACKGROUND""$CPRINT_STRING""$RESET"
		fi
		[ ! -z ${CPRINT_LOG_CPRINT_STYLED} ] && echo -e "$CPRINT_STRING" >> "$CPRINT_LOG_CPRINT_STYLED"
	}
	CPRINT_random_color()
	{
		local colors=( "BLACK" "WHITE" "RED" "YELLOW" "GREEN" "BLUE" "CYAN" "PURPLE" )
		echo "${colors[$RANDOM % ${#colors[@]}]}"
	}
	CPRINT_translate_color_code()
	{
		if [ $# -lt 1 ]; then
			echo "Missing color name."
			exit 1
		fi
		local CODE=""
		case "$1" in
			"FG"*)
				case "$1" in
					*"BLACK" ) CODE='30m' ;;
					*"WHITE" ) CODE='37m' ;;
					*"RED" ) CODE='31m' ;;
					*"YELLOW" ) CODE='33m' ;;
					*"GREEN" ) CODE='32m' ;;
					*"BLUE" ) CODE='34m' ;;
					*"CYAN" ) CODE='36m' ;;
					*"PURPLE" ) CODE='35m' ;;
				esac
				if [ ! -z ${CPRINT_BOLD} ]; then
					if [ $CPRINT_BOLD -eq 1 ]; then
						CODE='1;'$CODE
					fi
				else
					CODE='0;'$CODE
				fi
				;;
			"BG"*)
				case "$1" in
					*"BLACK" ) CODE='40m' ;;
					*"WHITE" ) CODE='47m' ;;
					*"RED" ) CODE='41m' ;;
					*"YELLOW" ) CODE='43m' ;;
					*"GREEN" ) CODE='42m' ;;
					*"BLUE" ) CODE='44m' ;;
					*"CYAN" ) CODE='46m' ;;
					*"PURPLE" ) CODE='45m' ;;
				esac
				;;
			"RESET") CODE='m' ;;
		esac
		case "$(uname -s)" in
			"Darwin") echo "\033[""$CODE" ;;
			"Linux") echo "\e[""$CODE" ;;
			*)
				echo "Unknown System: $(uname -s)"
				exit 1
				;;
		esac
	}
	CPRINT_parse_args()
	{
		while [ ${#} -gt 0 ];
		do
			case "${1}" in
				"-e" | "--stderr") CPRINT_ERR_OUT=1 ;;
				"-n" | "no-newline") CPRINT_NL=1 ;;
				"-p" | "--pre-newline")
					[ -z ${PCPRINT_NL} ] && PCPRINT_NL=0
					((PCPRINT_NL++))
					;;
				"-I" | "-b" | "--bold" ) CPRINT_BOLD=1 ;;
				"-A" | "--cowsay")
					if [ -f "$(which cowsay 2>/dev/null)" ]; then
						CPRINT_STYLE="$(which cowsay)"
					else
						(>&2 echo "Skipping $1 becasue, binary not available.")
					fi
					;;
				"-F" | "--figlet")
					if [ -f "$(which figlet 2>/dev/null)" ]; then
						CPRINT_STYLE="$(which figlet)"
					else
						(>&2 echo "Skipping $1 becasue, binary not available.")
					fi
					;;
				"--cow-file" | "--fig-file")
					if [ ! -z "${CPRINT_STYLE}" ]; then
						if [ ! -f "$2" ]; then
							(>&2 echo "Skipping $1 because, not a valid file: $2.")
						else
							CPRINT_STYLE="$CPRINT_STYLE -f $2"
						fi
					else
						(>&2 echo "Skipping $1 because, CPRINT_STYLE not set.")
					fi
					;;
				"-c" | "--centered") [ $(tput cols) -le 80 ] && CPRINT_POS=0 || CPRINT_POS=$((( $(tput cols) - 80 ) / 2 )) ;;
				"--BG" | "--bg" | "--background" | "--FG" | "--fg"| "--foreground")
					local TYPE=""
					local COLOR_CODE=""
					case "$1" in
						"--BG" | "--bg" | "--background") TYPE="BG" ;;
						"--FG" | "--fg" | "--foreground") TYPE="FG" ;;
					esac
					case "$2" in
						"black") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'BLACK')" ;;
						"white") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'WHITE')" ;;
						"red") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'RED')" ;;
						"yellow") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'YELLOW')" ;;
						"green") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'GREEN')" ;;
						"blue") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'BLUE')" ;;
						"cyan") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'CYAN')" ;;
						"purple") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE"'PURPLE')" ;;
						"random") COLOR_CODE="$(CPRINT_translate_color_code "$TYPE""$(CPRINT_random_color)")" ;;
						"*")
							(>&2 echo "Unrecognized Arguement: $2")
							exit 1
							;;
					esac
					case "$1" in
						"--BG" | "--bg" | "--background") CPRINT_BACKGROUND="$COLOR_CODE" ;;
						"--FG" | "--fg" | "--foreground") CPRINT_FOREGROUND="$COLOR_CODE" ;;
					esac
					shift
					;;
				"-K" | "--black") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGBLACK')" ;;
				"-W" | "--white") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGWHITE')" ;;
				"-R" | "--red") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGRED')" ;;
				"-Y" | "--yellow") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGYELLOW')" ;;
				"-G" | "--green") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGGREEN')" ;;
				"-B" | "--blue") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGBLUE')" ;;
				"-C" | "--cyan") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGCYAN')" ;;
				"-P" | "--purple") CPRINT_FOREGROUND="$(CPRINT_translate_color_code 'FGPURPLE')" ;;
				"-Z" | "--random") CPRINT_FOREGROUND="$(CPRINT_translate_color_code "FG$(CPRINT_random_color)")" ;;
				"-L" | "--log-styled")
					if [ -d "$2" ]; then
						echo "Specified filename is a directory: $2"
						exit 1
					fi
					CPRINT_LOG_CPRINT_STYLED="$2"
					shift
					;;
				"-l" | "--log")
					if [ -d "$2" ]; then
						echo "Specified filename is a directory: $2"
						exit 1
					fi
					CPRINT_LOG="$2"
					shift
					;;
				"-S" | "--string")
					shift
					CPRINT_STRING="$*"
					break
					;;
				*)
					CPRINT_STRING="$*"
					break
					;;
			esac
			shift 1
		done
	}
	CPRINT_parse_args "$@"
	if [ -z "${CPRINT_STRING}" ]; then
		CPRINT_STRING="$*"
	fi
	if [ ! -z "${CPRINT_STRING}" ]; then
		CPRINT_process_prenl
		CPRINT_process_string
		CPRINT_process_nl
	fi
	unset CPRINT_ERR_OUT
	unset CPRINT_NL
	unset CPRINT_PNL
	unset CPRINT_BOLD
	unset CPRINT_STYLE
	unset CPRINT_POS
	unset CPRINT_BACKGROUND
	unset CPRINT_FOREGROUND
	unset CPRINT_LOG
	unset CPRINT_LOG_STYLED
	unset CPRINT_STRING
}
#### ####

#### Customizable Functions ####
catch_exit_custom()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	while [ ${#} -gt 0 ]; do
		case "${1}" in
			0) debug_print -e -G -S "(${FUNCNAME[0]}) Successful exit: $1" ;;
			*) fail_notice_exit "(${FUNCNAME[0]}) Unknown argument: $1" 1 ;;
		esac
		shift 1
	done
}
debug_state_custom()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	debug_print -e -B -S "(${FUNCNAME[0]}) Current Custom Variable State: "
}
main_custom()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
}
parse_args_custom()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	while [ ${#} -gt 0 ]; do
		case "${1}" in
			*) fail_notice_exit "(${FUNCNAME[0]}) Unknown argument: $1" 1 ;;
		esac
		shift 1
	done
}
usage_custom()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	echo ""
}
#### ####

#### Custom Functions ####
catch_exit_custom() # Duplicated on purpose, to keep catch_exit_custom clean for generation.
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	if [ $# -lt 1 ];then
		debug_print -e -Y -S "(${FUNCNAME[0]}) Not enough arguments received."
		return 0
	fi
	case $1 in
		0)
			debug_print -e -G -S "(${FUNCNAME[0]}) Successful Exit: $code"
			[ -f "$NAME" ] && debug_print "(${FUNCNAME[0]}) File ready @ $NAME"
			;;
		*)
			debug_print -e -Y -S "(${FUNCNAME[0]}) Unknown exit: $code"
			[ -f "$NAME" ] && garbage_add "$NAME"
			;;
	esac
}
debug_state_custom() # Duplicated on purpose, to keep debug_state_custom clean for generation.
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	debug_print -e -B -S "(${FUNCNAME[0]}) Current Custom Variable State: "
	debug_print -e -B -S "(${FUNCNAME[0]}) ACTION: $ACTION"
	debug_print -e -B -S "(${FUNCNAME[0]}) BASH_BOILER_VERSION: $BASH_BOILER_VERSION"
	debug_print -e -B -S "(${FUNCNAME[0]}) BLOCK_FLAG: $BLOCK_FLAG"
	debug_print -e -B -S "(${FUNCNAME[0]}) BLOCK_END: $BLOCK_END"
	debug_print -e -B -S "(${FUNCNAME[0]}) BLOCK_NAMES: ${BLOCK_NAMES[*]}"
	debug_print -e -B -S "(${FUNCNAME[0]}) EXTERNAL_PROJECT_DESTINATION: ${EXTERNAL_PROJECT_DESTINATION[*]}"
	debug_print -e -B -S "(${FUNCNAME[0]}) EXTERNAL_PROJECT_FILE_TO_IMPORT: ${EXTERNAL_PROJECT_FILE_TO_IMPORT[*]}"
	debug_print -e -B -S "(${FUNCNAME[0]}) EXTERNAL_PROJECT_INIT_OPTIONS: ${EXTERNAL_PROJECT_INIT_OPTIONS[*]}"
	debug_print -e -B -S "(${FUNCNAME[0]}) EXTERNAL_PROJECT_REPOS: ${EXTERNAL_PROJECT_REPOS[*]}"
	debug_print -e -B -S "(${FUNCNAME[0]}) NAME: $NAME"
}
generate_template()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	touch "$1"
	echo "" >> "$1"
	cat > "$1" << EOL
#!/bin/bash
EOL
	for BLOCK_START in "${BLOCK_NAMES[@]}"
	do
		debug_print -e -B -S "(${FUNCNAME[0]}) Building $BLOCK_START"
		case "$BLOCK_START" in
			"Non-Customizable Header")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$1"
				generate_template_header "$1"
				;;
			"Custom Header" | 			"Custom Variables" | 			"Custom Functions")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$1"
				;;
			"Non-Customizable External Template Functions")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$1"
				generate_external_functions "$1"
				;;
			*)
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$1"
				START_RECORD=0
				cat "$0" | while read line
				do
					case "$line" in
						"$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG") START_RECORD=1 ;;
						"$BLOCK_END") [ $START_RECORD -eq 1 ] && break ;;
						*) [ $START_RECORD -gt 0 ] && echo "$line" >> "$1" ;;
					esac
				done
				;;
		esac
		debug_print -e -B -S "(${FUNCNAME[0]}) Finished $BLOCK_START"
		echo "$BLOCK_END" >> "$1"
		echo "" >> "$1"
	done
	cat >> "$1" << EOL
exit 0
EOL
}
generate_external_functions()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	index=0
	for p in "${EXTERNAL_PROJECT_REPOS[@]}"
	do
		git_external_project "$p" "${EXTERNAL_PROJECT_DESTINATION[$index]}"
		[ $? -ne 0 ] && fail_notice_exit "(${FUNCNAME[0]}) failed to get external project $p" 1
		init_external_project "${EXTERNAL_PROJECT_DESTINATION[$index]}" "${EXTERNAL_PROJECT_INIT_OPTIONS[$index]}"
		[ $? -ne 0 ] && fail_notice_exit "(${FUNCNAME[0]}) failed to setup external project $p with init: ${EXTERNAL_PROJECT_INIT_OPTIONS[$index]}" 1
		cat "${EXTERNAL_PROJECT_FILE_TO_IMPORT[@]}" >> "$1"
		garbage_add "${EXTERNAL_PROJECT_DESTINATION[$index]}"
	done
}
generate_template_header()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	cat >> "$1" << EOL
# BASH_BOILER_VERSION=$BASH_BOILER_VERSION
# Generated with Bash-Boiler on $START_DATE
# Use updater to update this script:
# https://github.com/coreyramirezgomez/Bash-Boiler.git
# Modifying any content between blocks like the following:
# "#### Non-Customizable ... #####"
# ....
# "$BLOCK_END"
# will be overwritten by Bash-Boiler updater function.
trap catch_exit \$?
EOL
}
git_external_project()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	case $# in
		1)
			repo_url="$1"
			debug_print -e -Y -S "(${FUNCNAME[0]}) No destination specified."
			dest="$WORK_DIR/$(echo $repo_url | rev | cut -d '/' -f1 | rev)"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Using default: $dest"
			;;
		2)
			repo_url="$1"
			dest="$2"
			;;
		*)
			debug_print -e -Y -S "(${FUNCNAME[0]}) More that 2 arguments provided: $*"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Only using first 2."
			repo_url="$1"
			dest="$2"
			;;
	esac
	FLAGS=""
	[ ! -z $QUIET ] && FLAGS="-q"
	[ ! -z $VERBOSE ] && FLAGS="-v"
	if [ -d $dest ]; then
		debug_print -e -Y -S "(${FUNCNAME[0]}) Project directory already exists. Attempting pull."
		cd "$dest" || local_print -e -R -S "(${FUNCNAME[0]}) Can't cd in $dest"
		[ $? -ne 0 ] && return 1
		git pull "$FLAGS"
		return_code=$?
		cd "$WORK_DIR" || local_print -e -R -S "(${FUNCNAME[0]}) Can't cd in $WORK_DIR"
		[ $? -ne 0 ] && return 1
	else
		git clone "$FLAGS" -- "$repo_url" "$dest"
		return_code=$?
	fi
	return $return_code
}
init_external_project()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 2 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	case $# in
		2)
			project_dir="$1"
			init_command="$2"
			;;
		*)
			debug_print -e -Y -S "(${FUNCNAME[0]}) More that 2 arguments provided: $*"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Only using first 2."
			project_dir="$1"
			init_command="$2"
			;;
	esac
	if [ ! -d "$project_dir" ]; then
		local_print -e -R -S "(${FUNCNAME[0]}) Not a directory: $project_dir"
		return 1
	fi
	cd "$project_dir" || local_print -e -Y -S "(${FUNCNAME[0]}) Can't cd in $project_dir"
	[ $? -ne 0 ] && return 1
	$init_command
	return_code=$?
	cd "$WORK_DIR" || local_print -e -R -S "(${FUNCNAME[0]}) Can't cd in $WORK_DIR"
	[ $? -ne 0 ] && return 1
	return $return_code
}
parse_args_custom() # Duplicated on purpose, to keep parse_args_custom clean for generation.
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	while [ ${#} -gt 0 ]; do
		case "${1}" in
			"--generate" | "-g")
				[[ "$ACTION" != "" ]] && fail_notice_exit "(${FUNCNAME[0]}) Another action is already defined. Only use one action at a time: --generate or --update." 1
				ACTION="GENERATE"
				;;
			"--update" | "-u")
				[[ "$ACTION" != "" ]] && fail_notice_exit "(${FUNCNAME[0]}) Another action is already defined. Only use one action at a time: --generate or --update." 1
				ACTION="UPDATE"
				;;
			"--name" )
				NAME="$2"
				shift
				;;
			*) fail_notice_exit "(${FUNCNAME[0]}) Unknown argument: $1" 1 ;;
		esac
		shift 1
	done
}
process_missing_binaries()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	return_code=0
	for b in "$@"
	do
		case "$b" in
			"beautysh")
				debug_print -e -B -S "(${FUNCNAME[0]}) $b is a python package, adding to list."
				touch "$WORK_DIR/$(basename $0)-requirements.txt"
				echo "$b" >> "$WORK_DIR/$(basename $0)-requirements.txt"
				check_binaries "virtualenv" "pip"
				if [ $? -ne 0 ]; then
					local_print -R -S "(${FUNCNAME[0]}) Missing $? required binaries." 101
					return 1
				fi
				;;
			*)
				debug_print -e -Y -S "(${FUNCNAME[0]}) No processing defined for $1."
				return_code=1
				;;
		esac
	done
	if [ -f "$WORK_DIR/$(basename $0)-requirements.txt" ]; then
		setup_virtualenv "$WORK_DIR/$(basename $0)-requirements.txt" "$WORK_DIR/$(basename $0)-pyvenv"
		return_code=$?
		if [ $return_code -eq 0 ]; then
			PATH="$PATH:$WORK_DIR/$(basename $0)-pyvenv/bin"
		else
			local_print -e -S -R "(${FUNCNAME[0]}) Failed to process python binaries $WORK_DIR/$(basename $0)-requirements.txt"
		fi
		garbage_add "$WORK_DIR/$(basename $0)-requirements.txt"
	fi
	return $return_code
}
setup_virtualenv()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	case "$#" in
		1)
			requirements="$1"
			dest="$WORK_DIR/$(basename $0)_pyvenv"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Missing destination argument, using default: $dest"
			;;
		2)
			requirements="$1"
			dest="$2"
			;;
		*)
			requirements="$1"
			dest="$2"
			debug_print -e -Y -S "(${FUNCNAME[0]}) Received more arguments than required, only using first 2: $*"
			;;
	esac
	debug_print -e -B -S "(${FUNCNAME[0]}) Received requirements argument: $requirements"
	debug_print -e -B -S "(${FUNCNAME[0]}) Received destination argument: $dest"
	if [ ! -d "$dest" ]; then
		virtualenv -"$VERBOSE""$QUIET" -- "$dest"
		if [ $? -ne 0 ]; then
			local_print -e -R -S "(${FUNCNAME[0]}) Failed to create virtualenv @ $dest"
			return 1
		else
			debug_print -e -G -S "(${FUNCNAME[0]}) Successfully create virtualenv @ $dest"
		fi
	fi
	if [ ! -f "$dest/bin/pip" ]; then
		local_print -e -R -S "(${FUNCNAME[0]}) Missing pip at @ $dest/bin/"
		return 1
	fi
	$dest/bin/pip -"$VERBOSE""$QUIET" install -r "$requirements"
	if [ $? -ne 0 ]; then
		local_print -e -R -S "(${FUNCNAME[0]}) Failed to install pip packages from $requirements"
		return 1
	else
		debug_print -e -G -S "(${FUNCNAME[0]}) Successfully installed pip packages from $requirements"
		garbage_add "$dest"
	fi
	return 0
}
main_custom() # Duplicated on purpose, to keep main_custom clean for generation.
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	if [[ "$ACTION" != "" ]];then
		[[ "$NAME" == "" ]] && fail_notice_exit "(${FUNCNAME[0]}) Missing script name. Required with action: $ACTION" 1
		if [ -f "$NAME" ];then
			get_response "(${FUNCNAME[0]}) Specified file $NAME already exists. Would you like to backup $NAME?"
			if [ $? -eq 0 ]; then
				backup_file "$NAME"
				[ $? -ne 0 ] && fail_notice_exit "(${FUNCNAME[0]}) Backup of $NAME failed!"
			else
				get_response "(${FUNCNAME[0]}) Are you sure you want to overwrite $NAME?"
				if [ $? -eq 0 ];then
					local_print -e -Y -S "(${FUNCNAME[0]}) Overwriting $NAME."
				elif [ $? -eq 1 ]; then
					local_print -e -G -S "(${FUNCNAME[0]}) Will not overwrite $NAME. Exiting."
					exit 0
				fi
			fi
		fi
		case "$ACTION" in
			"GENERATE") generate_template "$NAME" ;;
			"UPDATE") update_template "$NAME" ;;
			*) fail_notice_exit "(${FUNCNAME[0]}) Unknown ACTION: $ACTION";;
		esac
		if [ -f "$NAME" ];then
			check_binaries 'beautysh'
			if [ $? -ne 0 ]; then
				process_missing_binaries 'beautysh'
				[ $? -ne 0 ] && local_print -Y -S "(${FUNCNAME[0]}) Failed to get beautysh dynamically."
			fi
			beautysh --tab --files "$NAME"
		else
			local_print -e -R -S "(${FUNCNAME[0]}) Failed to beautify because missing file: $NAME."
			exit 1
		fi
	fi
}
usage_custom() # Duplicated on purpose, to keep usage_custom clean for generation.
{
	echo "	[[--generate|--update]|[-g|-u]]: Specify action to generate or update a script."
	echo "	--name filename: Filename to operate on."
}
update_template()
{
	debug_print -e -B -S "(${FUNCNAME[0]}) Started ${FUNCNAME[0]} function with args ($#): $*"
	[ $# -lt 1 ] && fail_notice_exit "(${FUNCNAME[0]}) Not enough arguments received." 101
	current_version="$1"
	new_version="$1-$BASH_BOILER_VERSION"
	echo "" >> "$new_version"
	cat > "$new_version" << EOL
#!/bin/bash
EOL
	for BLOCK_START in "${BLOCK_NAMES[@]}"
	do
		debug_print -e -B -S "(${FUNCNAME[0]}) Building $BLOCK_START"
		case "$BLOCK_START" in
			"Non-Customizable Header")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$new_version"
				generate_template_header "$new_version"
				;;
			"Customizable Variables")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$new_version"
				temp_new="$WORK_DIR/temp_new"
				temp_current="$WORK_DIR/temp_current"
				garbage_add "$temp_new"
				garbage_add "$temp_current"

				START_RECORD=0
				cat "$0" | while read line
				do
					case "$line" in
						"$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG") START_RECORD=1 ;;
						"$BLOCK_END") [ $START_RECORD -eq 1 ] && break ;;
						*) [ $START_RECORD -gt 0 ] && echo "$line" >> "$temp_new" ;;
					esac
				done
				START_RECORD=0
				cat "$current_version" | while read line
				do
					case "$line" in
						"$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG") START_RECORD=1 ;;
						"$BLOCK_END") [ $START_RECORD -eq 1 ] && break ;;
						*) [ $START_RECORD -gt 0 ] && echo "$line" >> "$temp_current" ;;
					esac
				done
				while read new_vars
				do
					new_var_name="$(echo $new_vars | cut -d '=' -f 1)"
					found_var=0
					while read current_vars
					do
						current_var_name="$(echo $current_vars | cut -d '=' -f 1)"
						if [ "$new_var_name" == "$current_var_name" ]; then
							found_var=1
							echo "$current_vars" >> "$new_version"
							break
						fi
					done < "${temp_current}"
					[ $found_var -eq 0 ] && echo "$new_vars" >> "$new_version"
				done < "${temp_new}"
				;;
			"Customizable Functions" | 			"Customizable Main Run"| 			"Customizable Script Entry" | 			"Custom Header" | 			"Custom Variables" | 			"Custom Functions")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$new_version"
				START_RECORD=0
				cat "$current_version" | while read line
				do
					case "$line" in
						"$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG") START_RECORD=1 ;;
						"$BLOCK_END") [ $START_RECORD -eq 1 ] && break ;;
						*) [ $START_RECORD -gt 0 ] && echo "$line" >> "$new_version" ;;
					esac
				done
				;;
			"Non-Customizable External Template Functions")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$new_version"
				generate_external_functions "$new_version"
				;;
			"Non-Customizable Global Variables" | 			"Non-Customizable Functions")
				echo "$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG" >> "$new_version"
				START_RECORD=0
				cat "$0" | while read line
				do
					case "$line" in
						"$BLOCK_FLAG $BLOCK_START $BLOCK_FLAG") START_RECORD=1 ;;
						"$BLOCK_END") [ $START_RECORD -eq 1 ] && break ;;
						*) [ $START_RECORD -gt 0 ] && echo "$line" >> "$new_version" ;;
					esac
				done
				;;
		esac
		debug_print -e -B -S "(generate_template) Finished $BLOCK_START"
		echo "$BLOCK_END" >> "$new_version"
		echo "" >> "$new_version"
	done
	cat >> "$new_version" << EOL
exit 0
EOL
	mv -f"$VERBOSE" -- "$new_version" "$current_version"
}
#### ####

#### Customizable Script Entry ####
if [ $# -lt 1 ] && [ $ARGS_REQUIRED -eq 1 ]; then
	local_print -e -R -S "($0) Missing arguments."
	usage
else
	parse_args "$@"
	main
fi
#### ####

exit 0
